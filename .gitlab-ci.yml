image: "python:3.9"

before_script:
  - python --version
  - pip install poetry
  - poetry --version

.install_dev:
  script:
    - poetry install

stages:
  - Static Analysis
  - Tests
  - Documentation
  - Release

###################
# Static Analysis #
###################
flake8:
  stage: Static Analysis
  tags:
    - lslab2
  script:
    - pip install flake8
    - flake8 .
  needs: []
  only:
    - merge_requests

black:
  stage: Static Analysis
  tags:
    - lslab2
  script:
    - pip install black
    - black --check ./
  needs: []
  only:
    - merge_requests

mypy:
  stage: Static Analysis
  tags:
    - lslab2
  script:
    - pip install mypy
    - mypy --config-file .mypy.ini .
  needs: []
  only:
    - merge_requests

isort:
  stage: Static Analysis
  tags:
    - lslab2
  script:
    - pip install isort
    - isort --check --trailing-comma -m=3 .
  needs: []
  only:
    - merge_requests

#########
# Tests #
#########
unittests:
  stage: Tests
  tags:
    - lslab2
  script:
    - !reference [.install_dev, script]
    - SDL_VIDEODRIVER=dummy poetry run pytest --junitxml=report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml
  needs: []
  only:
    - merge_requests

run_game.py:
  stage: Tests
  tags:
    - lslab2
  script:
    - !reference [.install_dev, script]
    - SDL_VIDEODRIVER="dummy" poetry run python run_game.py
  needs: []
  only:
    - merge_requests

coverage:
  stage: Tests
  tags:
  - lslab2
  script:
    - poetry install -E coverage
    - SDL_VIDEODRIVER=dummy poetry run python -m coverage run -m pytest
    - SDL_VIDEODRIVER=dummy poetry run python -m coverage report
    - SDL_VIDEODRIVER=dummy poetry run python -m coverage xml
  artifacts:
    reports:
      cobertura: coverage.xml
  needs: []
  only:
    - merge_requests
    - main

################
# GitLab Pages #
################
.pages:
  script:
    - poetry install -E docs
    - poetry run sphinx-build -d docs/build/doctrees docs/source docs/build/html
    - mv docs/build/html public/

test-pages:
  stage: Documentation
  tags:
    - lslab2
  extends: .pages
  needs: []
  artifacts:
    expose_as: 'HTML Documentation'
    paths:
      - public/
    expire_in: 1 week
  only:
    - merge_requests

pages:
  stage: Documentation
  tags:
    - lslab2
    - pages
  extends: .pages
  artifacts:
    paths:
      - public
  only:
    - main

###########################
# Packaging and Releasing #
###########################
test-release:
  stage: Release
  tags:
    - lslab2
  script:
    - poetry build
    - poetry run pip install -U dist/*.whl
    - poetry run python tests/package.py
  needs: []
  only:
    - merge_requests

.release:
  script:
    - poetry build
    - poetry config repositories.mitre-gitlab https://gitlab.mitre.org/api/v4/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry publish --repository mitre-gitlab -u gitlab-ci-token -p ${CI_JOB_TOKEN}

tag:
  stage: Release
  tags:
    - lslab2
  before_script:
    - DEBIAN_FRONTEND=noninteractive apt update
    - DEBIAN_FRONTEND=noninteractive apt -y install php php-json git curl
  script:
    - poetry version patch
    - VERSION=$(poetry version -s)
    - LOG=$(git log -1 | grep -Po '(?<=Resolve ")(.*?)(?=")')
    - ISSUE=$(git log -1 | grep -Po '(?<=Closes )(.*?).*')
    - MR=$(git log -1 | grep -Po '(?<=fireline/simfire)(.*?).*')
    - echo -e "# Version ${VERSION}\n\nThis version includes:\n\n* ${LOG} (closed ${ISSUE} with merge request ${MR})" > RELEASE.md
    - MESSAGE="$(php -r "echo json_encode(['name' => 'Version $VERSION', 'tag_name' => '$VERSION', 'description' => file_get_contents('RELEASE.md')]);")";
    - git remote remove origin
    - git remote add git remote add api-origin https://oauth2:${CI_TAG_TOKEN}@gitlab.mitre.org/fireline/simfire.git
    - git config --global user.email "fireline@mitre.org"
    - git config --global user.name "fiReLine CI Bot"
    - git add pyproject.toml
    - git commit -m "Change pyproject.toml version to $VERSION"
    - git push api-origin
    - git tag -a $VERSION -m "$VERSION"
    - git push api-origin $VERSION
    - curl --header 'Content-Type: application/json' --header "PRIVATE-TOKEN: ${CI_TAG_TOKEN}" --data "$MESSAGE" --request POST https://gitlab.mitre.org/api/v4/projects/${CI_PROJECT_ID}/releases
  only:
    - main

release:
  stage: Release
  tags:
    - lslab2
  extends: .release
  only:
    - tags
